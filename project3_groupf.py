# -*- coding: utf-8 -*-
"""Project3_GroupF

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qEpQ7pr3JbotG-1hH5s_h5dscpfTPeUW
"""

# Commented out IPython magic to ensure Python compatibility.
# Import the needed modules
# %pylab inline
import xarray as xr
import pandas as pd

# Download the needed modules
!pip install netcdf4
!pip install pydap
!pip install wget

# Download the data using wget for each year by asking for all .nc daily
# precipitation files in the specified directory without ascending to the
# parent directory.
!wget -r -np -nH -A gpcp_v01r03_daily_d*.nc -R *.tmp 'https://www.ncei.noaa'\
'.gov/data/global-precipitation-climatology-project-gpcp-daily/access/'

# Save the precipitation data by year and for a specfic grid point if the user
# would like using the .sel command. Here it is saved for the grid point
# closest to Cordoba, Argentina.
data_1996 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/1996/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_1997 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/1997/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_1998 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/1998/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_1999 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/1999/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2000 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2000/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2001 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2001/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2002 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2002/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2003 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2003/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2004 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2004/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2005 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2005/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2006 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2006/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2007 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2007/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2008 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2008/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2009 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2009/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2010 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2010/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2011 = xr.open_mfdataset('/content/data/global-precipitation' +
                              '-climatology-project-gpcp-daily/access/2011/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2012 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2012/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2013 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2013/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2014 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2014/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2015 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2015/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2016 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2016/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2017 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2017/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2018 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2018/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')
data_2019 = xr.open_mfdataset('/content/data/global-precipitation-' +
                              'climatology-project-gpcp-daily/access/2019/' +
                              '*.nc').sel(longitude=-64.188+360.,
                                          latitude=31.4201, method='nearest')

# Remove duplicate days to allow for the merging of the yearly datasets
data_2014_d = data_2014.sel(time=~data_2014.indexes['time'].duplicated())
data_2017_d = data_2017.sel(time=~data_2017.indexes['time'].duplicated())
data_2018_d = data_2018.sel(time=~data_2018.indexes['time'].duplicated())

# Merge the data into one file
yearly_data = xr.merge([data_1996, data_1997, data_1998, data_1999, data_2000,
                       data_2001, data_2002, data_2003, data_2004, data_2005,
                       data_2006, data_2007, data_2008, data_2009, data_2010,
                       data_2011, data_2012, data_2013, data_2014_d,
                       data_2015, data_2016, data_2017_d, data_2018_d,
                       data_2019])

# Create a date range to select only the desired DJF months from the larger
# precipitation dataset
dates = pd.date_range('19961001', '20191130')
df = pd.DataFrame({'a': range(8461)}, index=dates)

season = ((df.index.month % 12 + 3) // 3).map({1:'DJF', 2: 'MAM', 3:'JJA', +
                                               4:'SON'})

df_winter = df[season == 'DJF']
dates2 = df_winter.index.strftime("%Y%m%d")
dates2

date_index = df_winter.index
print(date_index.year)

# Save the precipitation variable
yearly_precip = yearly_data['precip']

# Save only DJF data
DJF_daily_precip = yearly_precip.sel(time = date_index)

# Convert xarray DataArray to a pandas dataframe
pd_DJF_daily_precip = xr.DataArray.to_dataframe(DJF_daily_precip)

# Replace -99999.0000 values with NaN
DJF_daily_precip1 = pd_DJF_daily_precip.replace(-99999.000000, NaN)

# Save 95th precentile data
DJF_daily_precip1['precip'].quantile(.95)

# Save days where the DJF daily precipitation was above the 95th percentile
DJF_daily_precip_95 = DJF_daily_precip1[DJF_daily_precip1['precip'] >= +
                                      DJF_daily_precip1['precip'].quantile
                                      (0.95)]

# Mount google drive to save .nc file
from google.colab import drive
drive.mount('/content/drive',force_remount=True)

# Save to a netCDF file for future use and view the DJF 95th percentile data
(DJF_daily_precip_95.to_xarray()).to_netcdf('DJF.nc')
DJF_daily_precip_95

# View the days of the DJF 95th percentile precipitation
print(DJF_daily_precip_95.index)

# Create a cumulative distribution function of the precipitation data for
# all DJF days and highlight the location of the 95th percentile
x = np.sort(DJF_daily_precip1['precip'])
y = np.arange(1, len(x) + 1)/len(x)
plt.figure(figsize=(9, 8))
plt.plot(x, y, marker='.', linestyle='none')
plt.axhline(y=0.95, color='r', linestyle='-')
plt.title('Cumulative Distribution Function of Cordoba, Argentina DJF Daily' +
          ' Precipitation', size=15)
plt.text(0, 0.96, '95th Percentile')
plt.xlabel('Precipitation (mm)')
plt.ylabel('Probability')

#Part 2 of reading in reanalysis data
#Import the packages that we need
# %pylab inline
import pandas as pd
import glob
import matplotlib.pyplot as plt
import xarray as xr
import numpy as np
!pip install netCDF4
!pip install pydap
from netCDF4 import Dataset

# Commented out IPython magic to ensure Python compatibility.
#mount google drive to retrieve nc file from part 1
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/My Drive/Project3/Combined

#Read in file into a dataset
Precip_dates_data = xr.open_dataset('DJF.nc')
Precip_dates_data_array = Precip_dates_data['time']
#check a date
Precip_dates_data['time'][Precip_dates_data['time.year'].values == 1996]

# This is where we import the NCEP Reanalysis fields directly from the NOAA THREDDS server. This code segment will only selecte the extreme precipitation days and retrieve those files.
# Create empty datasets for the years 1999-2019
years = np.arange(1996,2020)

datasets_Uwind_250hPa = []
datasets_Vwind_250hPa = []
datasets_GeopHgt_500hPa = []
datasets_Uwind_500hPa = []
datasets_Vwind_500hPa = []
datasets_Omega_500hPa = []
datasets_Uwind_850hPa = []
datasets_Vwind_850hPa = []
datasets_SpecHum_850hPa = []
datasets_AirTemp_850hPa = []
datasets_Uwind_sig995 = []
datasets_Vwind_sig995 = []
datasets_skt_Sfc = []
datasets_pr_wtr = []

# This runs through to check that each year is present to pull files for
for iyr in years:

    print('working on '+str(iyr))

    if len(Precip_dates_data['time'][Precip_dates_data['time.year'].values==iyr]) > 0:
      dates_year = Precip_dates_data['time'][Precip_dates_data['time.year'].values ==iyr]

      #Extract data from the NCEP reanalysis dataset
      # sel(level) allows us to pull out only certian levels of intformation needed. ex: level=250 retrieves the Uwind value at 250hPa
      ds_Uwind_250hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/uwnd.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=250, time=dates_year)
      ds_Vwind_250hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/vwnd.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=250, time=dates_year)
      ds_GeopHgt_500hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/hgt.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=500, time=dates_year)
      ds_Uwind_500hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/uwnd.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=500, time=dates_year)
      ds_Vwind_500hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/vwnd.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=500, time=dates_year)
      ds_Omega_500hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/omega.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=500, time=dates_year)
      ds_Uwind_850hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/uwnd.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=850, time=dates_year)
      ds_Vwind_850hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/vwnd.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=850, time=dates_year)
      ds_SpecHum_850hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/shum.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=850, time=dates_year)
      ds_AirTemp_850hPa = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/pressure/air.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            level=850, time=dates_year)
      ds_Uwind_sig995 = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/surface/uwnd.sig995.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            time=dates_year)
      ds_Vwind_sig995 = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/surface/vwnd.sig995.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            time=dates_year)
      ds_skt_Sfc = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/surface_gauss/skt.sfc.gauss.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            time=dates_year)
      ds_pr_wtr = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.dailyavgs/surface/pr_wtr.eatm.'+str(iyr)+'.nc',engine='netcdf4').sel(\
                            time=dates_year)

      #Append data for use later
      datasets_Uwind_250hPa.append(ds_Uwind_250hPa)
      datasets_Vwind_250hPa.append(ds_Vwind_250hPa)
      datasets_GeopHgt_500hPa.append(ds_GeopHgt_500hPa)
      datasets_Uwind_500hPa.append(ds_Uwind_500hPa)
      datasets_Vwind_500hPa.append(ds_Vwind_500hPa)
      datasets_Omega_500hPa.append(ds_Omega_500hPa)
      datasets_Uwind_850hPa.append(ds_Uwind_850hPa)
      datasets_Vwind_850hPa.append(ds_Vwind_850hPa)
      datasets_SpecHum_850hPa.append(ds_SpecHum_850hPa)
      datasets_AirTemp_850hPa.append(ds_AirTemp_850hPa)
      datasets_Uwind_sig995.append(ds_Uwind_sig995)
      datasets_Vwind_sig995.append(ds_Vwind_sig995)
      datasets_skt_Sfc.append(ds_skt_Sfc)
      datasets_pr_wtr.append(ds_pr_wtr)

#This combines the DJF extreme precipitation days from each yearly file into 1 file for plotting
combined_Uwind_250hPa = xr.concat(datasets_Uwind_250hPa, dim='index')
combined_Vwind_250hPa = xr.concat(datasets_Vwind_250hPa, dim='index')
combined_GeopHgt_500hPa = xr.concat(datasets_GeopHgt_500hPa, dim='index')
combined_Uwind_500hPa = xr.concat(datasets_Uwind_500hPa, dim='index')
combined_Vwind_500hPa = xr.concat(datasets_Vwind_500hPa, dim='index')
combined_Omega_500hPa = xr.concat(datasets_Omega_500hPa, dim='index')
combined_Uwind_850hPa = xr.concat(datasets_Uwind_850hPa, dim='index')
combined_Vwind_850hPa = xr.concat(datasets_Vwind_850hPa, dim='index')
combined_SpecHum_850hPa = xr.concat(datasets_SpecHum_850hPa, dim='index')
combined_AirTemp_850hPa = xr.concat(datasets_AirTemp_850hPa, dim='index')
combined_Uwind_sig995 = xr.concat(datasets_Uwind_sig995, dim='index')
combined_Vwind_sig995 = xr.concat(datasets_Vwind_sig995, dim='index')
combined_skt_Sfc = xr.concat(datasets_skt_Sfc, dim='index')
combined_pr_wtr = xr.concat(datasets_pr_wtr, dim='index')

#This then converts those dataset files into a NETCDF 
combined_Uwind_250hPa.to_netcdf('combined_Uwind_250hPa_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_250hPa.to_netcdf('combined_Vwind_250hPa_1996to2019_ExtremePrecipDays.nc')
combined_GeopHgt_500hPa.to_netcdf('combined_GeopHgt_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Uwind_500hPa.to_netcdf('combined_Uwind_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_500hPa.to_netcdf('combined_Vwind_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Omega_500hPa.to_netcdf('combined_Omega_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Uwind_850hPa.to_netcdf('combined_Uwind_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_850hPa.to_netcdf('combined_Vwind_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_SpecHum_850hPa.to_netcdf('combined_SpecHum_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_AirTemp_850hPa.to_netcdf('combined_AirTemp_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_Uwind_sig995.to_netcdf('combined_Uwind_sig995_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_sig995.to_netcdf('combined_Vwind_sig995_1996to2019_ExtremePrecipDays.nc')
combined_skt_Sfc.to_netcdf('combined_skt_Sfc_1996to2019_ExtremePrecipDays.nc')
combined_pr_wtr.to_netcdf('combined_pr_wtr_1996to2019_ExtremePrecipDays.nc')

# Move the created NETCDF files into your Google Drive
from google.colab import drive
drive.mount('/content/drive')
!mv *.nc "/content/drive/My Drive/Project3/Combined/"

## This section allows the importing of the long-term mean of the NCEP Reanalysis data from 1981-2010, only selecting DJF(which are the months of interest)
# The longterm mean files are in Gregorian time

months = xr.cftime_range(start='0001-01-01', end='0001-12-01', freq='MS', calendar = 'standard') # selecting long-term mean data for 1981-2010 with cftime.DatetimeGregorian format
months = months[(months.month==12)|(months.month==1)|(months.month==2)] # selecting long-term mean data for DJF in 1981-2010

# Extract data
ds_Uwind_250hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/uwnd.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=250, time = months)
ds_Vwind_250hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/vwnd.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=250, time = months)
ds_GeopHgt_500hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/hgt.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=500, time = months)
ds_Uwind_500hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/uwnd.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=500, time = months)
ds_Vwind_500hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/vwnd.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=500, time = months)
ds_Omega_500hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/omega.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=500, time = months)
ds_Uwind_850hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/uwnd.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=850, time = months)
ds_Vwind_850hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/vwnd.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=850, time = months)
ds_SpecHum_850hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/shum.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=850, time = months)
ds_AirTemp_850hPa_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/pressure/air.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      level=850, time = months)
ds_Uwind_sig995_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/surface/uwnd.sig995.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      time = months)
ds_Vwind_sig995_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/surface/vwnd.sig995.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      time = months)
ds_skt_Sfc_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/surface_gauss/skt.sfc.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      time = months)
ds_pr_wtr_LTM = xr.open_dataset('https://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis.derived/surface/pr_wtr.eatm.mon.1981-2010.ltm.nc',engine='netcdf4').sel(\
                      time = months)

## Read in combined reanalysis netcdf files from google drive. These only contain the extreme precipitation days


from netCDF4 import Dataset

combined_Uwind_250hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Uwind_250hPa_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_250hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Vwind_250hPa_1996to2019_ExtremePrecipDays.nc')
combined_GeopHgt_500hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_GeopHgt_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Uwind_500hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Uwind_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_500hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Vwind_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Omega_500hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Omega_500hPa_1996to2019_ExtremePrecipDays.nc')
combined_Uwind_850hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Uwind_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_850hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_Vwind_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_SpecHum_850hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_SpecHum_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_AirTemp_850hPa = Dataset('/content/drive/My Drive/Project3/Combined/combined_AirTemp_850hPa_1996to2019_ExtremePrecipDays.nc')
combined_Uwind_sig995 = Dataset('/content/drive/My Drive/Project3/Combined/combined_Uwind_sig995_1996to2019_ExtremePrecipDays.nc')
combined_Vwind_sig995 = Dataset('/content/drive/My Drive/Project3/Combined/combined_Vwind_sig995_1996to2019_ExtremePrecipDays.nc')
combined_SkinTemp_Sfc = Dataset('/content/drive/My Drive/Project3/Combined/combined_SkinTemp_Sfc_1996to2019_ExtremePrecipDays.nc')
combined_PrecipWater = Dataset('/content/drive/My Drive/Project3/Combined/combined_PrecipWater_1996to2019_ExtremePrecipDays.nc')

### assign data to variables for plotting

uwind_250 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Uwind_250hPa_1996to2019_ExtremePrecipDays.nc')
vwind_250 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Vwind_250hPa_1996to2019_ExtremePrecipDays.nc')
hgt = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_GeopHgt_500hPa_1996to2019_ExtremePrecipDays.nc')
uwind_500 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Uwind_500hPa_1996to2019_ExtremePrecipDays.nc')
vwind_500 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Vwind_500hPa_1996to2019_ExtremePrecipDays.nc')
uwind_850 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Uwind_850hPa_1996to2019_ExtremePrecipDays.nc')
vwind_850 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Vwind_850hPa_1996to2019_ExtremePrecipDays.nc')
shm = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_SpecHum_850hPa_1996to2019_ExtremePrecipDays.nc')
temp_850 = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_AirTemp_850hPa_1996to2019_ExtremePrecipDays.nc')
uwind_sfc = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Uwind_sig995_1996to2019_ExtremePrecipDays.nc')
vwind_sfc = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_Vwind_sig995_1996to2019_ExtremePrecipDays.nc')
skt = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_skt_Sfc_1996to2019_ExtremePrecipDays.nc')
pwtr = xr.open_dataset('/content/drive/My Drive/Colab Notebooks/ATMS 597 Projects/Project3/Combined/combined_pr_wtr_1996to2019_ExtremePrecipDays.nc')

### calculate means for each variable 

uwind_250_avg = uwind_250.mean(dim='index')
vwind_250_avg = vwind_250.mean(dim='index')
hgt_avg = hgt.mean(dim='index')
uwind_500_avg = uwind_500.mean(dim='index')
vwind_500_avg = vwind_500.mean(dim='index')
uwind_850_avg = uwind_850.mean(dim='index')
vwind_850_avg = vwind_850.mean(dim='index')
shm_avg = shm.mean(dim='index')
temp_850_avg = temp_850.mean(dim='index')
uwind_sfc_avg = uwind_sfc.mean(dim='index')
vwind_sfc_avg = vwind_sfc.mean(dim='index')
skt_avg = skt.mean(dim='index')
pwtr_avg = pwtr.mean(dim='index')

### adjust units for variables that need it 

temp_850_avg['air'] = temp_850_avg['air'] - 273.15
skt_avg['skt'] = skt_avg['skt'] - 273.15
shm_avg['shum'] = shm_avg['shum'] * 1000

################### plot anomaly fields

### plot 250 mb winds

# create variables

x = uwind_250_avg.lon
y = uwind_250_avg.lat
u = uwind_250_avg['uwnd']
v = vwind_250_avg['vwnd']

u_ltm = ds_Uwind_250hPa_LTM['uwnd'].mean(dim='time')
v_ltm = ds_Vwind_250hPa_LTM['vwnd'].mean(dim='time')
 
u = u - u_ltm
v = v - v_ltm
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('250 mb Wind Vector and Speed Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('250 mb wind')
plt.show()

### plot 500 mb winds

# create variables 

x = uwind_500_avg.lon
y = uwind_500_avg.lat
u = uwind_500_avg['uwnd']
v = vwind_500_avg['vwnd']

u_ltm = ds_Uwind_500hPa_LTM['uwnd'].mean(dim='time')
v_ltm = ds_Vwind_500hPa_LTM['vwnd'].mean(dim='time')
 
u = u - u_ltm
v = v - v_ltm
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('500 mb Wind Vector and Speed Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('500 mb winds')
plt.show()

### plot 500 mb height

x = hgt_avg.lon
y = hgt_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
hgt_ltm = ds_GeopHgt_500hPa_LTM['hgt'].mean(dim='time')
hgt = hgt_avg['hgt']
 
data = hgt - hgt_ltm
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'seismic')
cbar = fig.colorbar(contourf_)
cbar.set_label('Geopotential Height Anomaly (m)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('500 mb Geopotential Height Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('500 mb height')
plt.show()

### plot 850 mb temperature

x = temp_850_avg.lon
y = temp_850_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot temp as filled contours
temp_ltm = ds_AirTemp_850hPa_LTM['air'].mean(dim='time')
temp = temp_850_avg['air']
 
data = temp - temp_ltm
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'seismic')
cbar = fig.colorbar(contourf_)
cbar.set_label('Temperature Anomaly (C)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('850 mb Temperature Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('850 mb temp')
plt.show()

### plot 850 mb specific humidity 

x = shm_avg.lon
y = shm_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot shm as filled contours
shm_ltm = ds_SpecHum_850hPa_LTM['shum'].mean(dim='time')
shm = shm_avg['shum']
 
data = shm - shm_ltm
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'seismic')
cbar = fig.colorbar(contourf_)
cbar.set_label('Specific Humidity Anomaly (g/kg)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('850 mb Specific Humidity Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('850 mb shm')
plt.show()

### plot 850 mb winds

x = uwind_850_avg.lon
y = uwind_850_avg.lat
u = uwind_850_avg['uwnd']
v = vwind_850_avg['vwnd']

u_ltm = ds_Uwind_850hPa_LTM['uwnd'].mean(dim='time')
v_ltm = ds_Vwind_850hPa_LTM['vwnd'].mean(dim='time')
 
u = u - u_ltm
v = v - v_ltm
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')


ax.set_global()
ax.coastlines()

plt.title('850 mb Wind Vector and Speed Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('850 mb wind')
plt.show()

### plot skin temp

# For skin temperature 
x = skt_avg.lon
y = skt_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot skin temperature as filled contours
skt_ltm = ds_skt_Sfc_LTM['skt'].mean(dim='time')
skt_ext = skt_avg['skt']
 
data = skt_ext - skt_ltm
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'seismic')
cbar = fig.colorbar(contourf_)
cbar.set_label('Skin Temperature Anomaly (C)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Skin Temperature Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('skt')
plt.show()

### plot surface wind

x = uwind_sfc_avg.lon
y = uwind_sfc_avg.lat
u = uwind_sfc_avg['uwnd']
v = vwind_sfc_avg['vwnd']

u_ltm = ds_Uwind_sig995_LTM['uwnd'].mean(dim='time')
v_ltm = ds_Vwind_sig995_LTM['vwnd'].mean(dim='time')
 
u = u - u_ltm
v = v - v_ltm
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')


ax.set_global()
ax.coastlines()

plt.title('Surface Wind Vector and Speed Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('sfc wind')
plt.show()

### plot precipitable water

x = pwtr_avg.lon
y = pwtr_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
pwtr_ltm = ds_pr_wtr_LTM ['pr_wtr'].mean(dim='time')
pwtr = pwtr_avg['pr_wtr']
 
data = pwtr - pwtr_ltm
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'seismic')
cbar = fig.colorbar(contourf_)
cbar.set_label('Precipitable Water Anomaly (kg/m^2)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Precipitable Water Anomalies for Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('pwtr')
plt.show()

############# plot mean fields 

### 250 mb winds

# create variables 

x = uwind_250_avg.lon
y = uwind_250_avg.lat
u = uwind_250_avg['uwnd']
v = vwind_250_avg['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Mean 250 mb Wind Vectors and Speed during Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('250 mb winds meanfield')
plt.show()

### 500 mb winds

# create variables 

x = uwind_500_avg.lon
y = uwind_500_avg.lat
u = uwind_500_avg['uwnd']
v = vwind_500_avg['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Mean 500 mb Wind Vectors and Speed during Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('500 mb winds meanfield')
plt.show()

### 500 mb height

x = hgt_avg.lon
y = hgt_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
hgt = hgt_avg['hgt']
 
data = hgt
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'Reds')
cbar = fig.colorbar(contourf_)
cbar.set_label('Geopotential Height (m)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Mean Geopotential Height During Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('hgt_meanfield')
plt.show()

### 850 mb temp

x = temp_850_avg.lon
y = temp_850_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
temp = temp_850_avg['air']
 
data = temp
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'Reds')
cbar = fig.colorbar(contourf_)
cbar.set_label('Temperature (C)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Mean 850 mb Temperature During Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('850temp_meanfield')
plt.show()

### 850 mb shm

x = shm_avg.lon
y = shm_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
shm = shm_avg['shum']
 
data = shm
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
# ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree())
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'Reds')
cbar = fig.colorbar(contourf_)
cbar.set_label('Specific Humidity  (kg/kg)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Mean 850 mb Specific Humidity During Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('850shm_meanfield')
plt.show()

### 850 mb winds

# create variables 

x = uwind_850_avg.lon
y = uwind_850_avg.lat
u = uwind_850_avg['uwnd']
v = vwind_850_avg['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Mean 850 mb Wind Vectors and Speed during Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('850 mb winds meanfield')
plt.show()

### skin temps

x = skt_avg.lon
y = skt_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
skt = skt_avg['skt']
 
data = skt
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'Reds')
cbar = fig.colorbar(contourf_)
cbar.set_label('Skin Temperature (C)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Mean Skin Temperature During Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('skt_meanfield')
plt.show()

### sfc winds

# create variables 

x = uwind_sfc_avg.lon
y = uwind_sfc_avg.lat
u = uwind_sfc_avg['uwnd']
v = vwind_sfc_avg['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Mean Surface Wind Vectors and Speed during Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('sfc winds meanfield')
plt.show()

### precip water

x = pwtr_avg.lon
y = pwtr_avg.lat
 
# Create the matplotlib figure and axis
fig = plt.figure(figsize=(20,8.5))
ax = plt.axes(projection=ccrs.PlateCarree())
 
# Plot height as filled contours
pwtr = pwtr_avg['pr_wtr']
 
data = pwtr
data_cyc, x_cyc = cutil.add_cyclic_point(data, coord=x)
contourf_ = ax.contourf(x_cyc, y, data_cyc, transform=ccrs.PlateCarree(), cmap = 'Blues')
cbar = fig.colorbar(contourf_)
cbar.set_label('Precipitable Water (kg/m^2)', rotation=90)
ax.set_global()
ax.coastlines()

plt.title('Mean Precipitable Water During Extreme Precipitation Days in Cordoba, Argentina (1996-2019)')
plt.savefig('pwtr_meanfield')
plt.show()

######################## plot global long term means

### plot specific humidity

fig = plt.figure(figsize = (20, 8.5))
ax  = fig.add_subplot(2, 1, 1, projection = ccrs.PlateCarree(central_longitude = 180))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines()
 
# Calculate mean values for DJF
 
t_djf_ltm_850 = ds_SpecHum_850hPa_LTM.mean(dim = 'time')['shum']
c = ax.contourf(t_djf_ltm_850.lon, t_djf_ltm_850.lat,
                t_djf_ltm_850 + 273.15,10, transform = ccrs.PlateCarree(), cmap = 'Reds', alpha = 0.8)
cbar = fig.colorbar(c)
cbar.set_label('Specific Humidty (g/kg)', rotation=90)
plt.title('Global Long Term Mean 850 mb Specific Humidity')

### plot 500 mb geo. height

fig = plt.figure(figsize = (20, 8.5))
ax  = fig.add_subplot(2, 1, 1, projection = ccrs.PlateCarree(central_longitude = 180))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines()
 
# Calculate mean values for DJF
 
t_djf_ltm_850 = ds_GeopHgt_500hPa_LTM.mean(dim = 'time')['hgt']
c = ax.contourf(t_djf_ltm_850.lon, t_djf_ltm_850.lat,
                t_djf_ltm_850 + 273.15,10, transform = ccrs.PlateCarree(), cmap = 'Reds', alpha = 0.8)
cbar = fig.colorbar(c)
cbar.set_label('Geopotential Height (m)', rotation=90)
plt.title('Global Long Term Mean Geopotential Height')

### plot skin temps

fig = plt.figure(figsize = (20, 8.5))
ax  = fig.add_subplot(2, 1, 1, projection = ccrs.PlateCarree(central_longitude = 180))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines()
 
# Calculate mean values for DJF
 
t_djf_ltm_850 = ds_skt_Sfc_LTM.mean(dim = 'time')['skt']
c = ax.contourf(t_djf_ltm_850.lon, t_djf_ltm_850.lat,
                t_djf_ltm_850 + 273.15,10, transform = ccrs.PlateCarree(), cmap = 'Reds', alpha = 0.8)
cbar = fig.colorbar(c)
cbar.set_label('Temperature (C)', rotation=90)
plt.title('Global Long Term Mean Skin Temperature')

### plot pr_wtr

fig = plt.figure(figsize = (20, 8.5))
ax  = fig.add_subplot(2, 1, 1, projection = ccrs.PlateCarree(central_longitude = 180))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines()
 
# Calculate mean values for DJF
 
t_djf_ltm_850 = ds_pr_wtr_LTM.mean(dim = 'time')['pr_wtr']
c = ax.contourf(t_djf_ltm_850.lon, t_djf_ltm_850.lat,
                t_djf_ltm_850 + 273.15,10, transform = ccrs.PlateCarree(), cmap = 'Blues', alpha = 0.8)

cbar = fig.colorbar(c)
cbar.set_label('Precipitable Water (kg/m^2)', rotation=90)
plt.title('Global Long Term Mean Precipitable Water')

### plot 850 mb temps

fig = plt.figure(figsize = (20, 8.5))
ax  = fig.add_subplot(2, 1, 1, projection = ccrs.PlateCarree(central_longitude = 180))
ax = plt.axes(projection=ccrs.PlateCarree())
ax.coastlines()
 
# Calculate mean values for DJF
 
t_djf_ltm_850 = ds_AirTemp_850hPa_LTM.mean(dim = 'time')['air']
c = ax.contourf(t_djf_ltm_850.lon, t_djf_ltm_850.lat,
                t_djf_ltm_850 + 273.15,10, transform = ccrs.PlateCarree(), cmap = 'Reds', alpha = 0.8)

cbar = fig.colorbar(c)
cbar.set_label('Temperature (C)', rotation=90)
plt.title('Global Long Term 850 mb Temperatures for DJF')

### plot surface winds

# create variables 

x = uwind_500_avg.lon
y = uwind_500_avg.lat
u = ds_Uwind_sig995_LTM.mean(dim = 'time')['uwnd']
v = ds_Vwind_sig995_LTM.mean(dim = 'time')['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Global Long Term Mean Surface Winds')
#plt.savefig('500 mb winds')
plt.show()

### plot 250 mb winds

# create variables 

x = uwind_250_avg.lon
y = uwind_250_avg.lat
u = ds_Uwind_250hPa_LTM.mean(dim = 'time')['uwnd']
v = ds_Vwind_250hPa_LTM.mean(dim = 'time')['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Global Long Term Mean 250 mb Winds')
#plt.savefig('500 mb winds')
plt.show()

### plot 500 mb winds

# create variables 

x = uwind_500_avg.lon
y = uwind_500_avg.lat
u = ds_Uwind_500hPa_LTM.mean(dim = 'time')['uwnd']
v = ds_Vwind_500hPa_LTM.mean(dim = 'time')['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Global Long Term Mean 500 mb Winds')
#plt.savefig('500 mb winds')
plt.show()

### plot 850 mb winds

# create variables 

x = uwind_850_avg.lon
y = uwind_850_avg.lat
u = ds_Uwind_850hPa_LTM.mean(dim = 'time')['uwnd']
v = ds_Vwind_850hPa_LTM.mean(dim = 'time')['vwnd']
 
# Create the matplotlib figure/axis and plot

fig = plt.figure(figsize=(20,10))
ax = plt.axes(projection=ccrs.PlateCarree())
plt.quiver(x,y,u,v,color='b')
ax.set_global()
ax.coastlines()

plt.title('Global Long Term Mean 850 mb Winds')
#plt.savefig('500 mb winds')
plt.show()
